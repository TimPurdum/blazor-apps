<div @ref="_keyboard" class="music-keyboard">
    <CascadingValue Name="SoundPlayer" Value="@SoundPlayer">
        <CascadingValue Name="ModuleTask" Value="@_moduleTask">
            @{
                var barClass = Instrument.InstrumentType.ToString().ToLower();
                for (var i = 0; i < Instrument.Naturals.Count; i++)
                {
                    var pitch = Instrument.Naturals[i];
                    if (pitch.LetterName == ' ')
                    {
                        // dummy placeholder
                        barClass = "dummy";
                    }
                    else
                    {
                        barClass = Instrument.InstrumentType.ToString().ToLower();
                    }
                    var heightPct = Instrument.InstrumentType == InstrumentType.Piano
                        ? 100
                        : 100 - ((30 / Instrument.Naturals.Count) * i);
                    var model = BuildBarModel(pitch);
                    var id = model.BarId;
                    <KeyBarButton KeyBarModel="@model" @bind-MouseIsDown="@MouseIsDown"
                                  @bind-TouchPoint="@TouchPoint" TouchOnBar="@OnTouchOnBar"
                                  @ref="_keyBars[id]" IsAccidental="false"
                                  Height="@heightPct" Width="@_barWidth" BarClass="@barClass"/>
                }
                for (var j = 0; j < Instrument.Accidentals.Count; j++)
                {
                    var pitch = Instrument.Accidentals[j];
                    var heightPct = Instrument.InstrumentType == InstrumentType.Piano
                        ? 50
                        : 50 - ((30 / Instrument.Accidentals.Count) * j);
                    var model = BuildBarModel(pitch);
                    var id = model.BarId;
                    <KeyBarButton KeyBarModel="@model" @bind-MouseIsDown="@MouseIsDown"
                                  @bind-TouchPoint="@TouchPoint" TouchOnBar="@OnTouchOnBar"
                                  Left="@CalculateAccidentalLeftOffset(pitch)"
                                  @ref="_keyBars[id]" IsAccidental="true"
                                  Height="@heightPct" Width="@_accidentalBarWidth" BarClass="@($"{barClass} accidental")"/>
                }
            }
        </CascadingValue>
    </CascadingValue>
</div>